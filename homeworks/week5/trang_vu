import java.util.HashMap;

class trang_vu5 {
  public static void main(String[] args) {
    int[] boss = { 1, 3, 3, -1, -1, 4, 2, 8, 3 };
    System.out.println(lowestCommonBoss(boss, 1, 1)); // 1
    System.out.println(lowestCommonBoss(boss, 2, 0)); // 3
    System.out.println(lowestCommonBoss(boss, 6, 0)); // 3
    System.out.println(lowestCommonBoss(boss, 7, 1)); // 3
    System.out.println(lowestCommonBoss(boss, 4, 5)); // 4
    System.out.println(lowestCommonBoss(boss, 6, 5)); // -1
    System.out.println(lowestCommonBoss(boss, 4, 2)); // -1
    System.out.println(lowestCommonBoss(boss, 4, 3)); // -1
    System.out.println(lowestCommonBoss(boss, 4, -1)); // -1
  }


  // Time complexity : O(logn), travel up to 2 times height  = log2(n) x2
  // Space complexity: 0(1), do not require additional space

  static int lowestCommonBoss(int[] boss, int e1, int e2) {
    //Edge cases
    if (e1 == e2) {
      return e1;
    }
    if (e1 == -1 || e2 == -1) {
      return -1;
    }

    //// Travel from e1 to root, add every node on the way to hashmap
    HashMap<Integer, Boolean> path1 = new HashMap<>();
    path1.put(e1, true);
    int boss1 = e1;
    while (boss1 != -1) {
      boss1 = boss[boss1];
      path1.put(boss1, true);
    }

    // Travel from e2 to root and compare to hash table, if equal return common boss
    int boss2 = e2;
    while (boss2 != -1) {
      if (path1.get(boss2) != null) {
        return boss2;
      }
      boss2 = boss[boss2];
    }
    return -1;
  }
}
